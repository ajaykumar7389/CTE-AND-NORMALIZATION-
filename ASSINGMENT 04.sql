-- Normalisation and cte queries
-- QUE-1 Identify a table in the Sakila database that violates 1NF. Explain how you would normalize it to achieve 1NF
-- ANS 1. actor_award table voilate 1nf formation in mavenmovies database voilate 1nf formation we can normalized it by updating 
-- the actor_award table, avoid multivalued (each column has only atomic value ),also we can create saperate tables for the column which
-- contain multiple value etc . 
select awards from actor_award;
-- QUE-2 Choose a table in Sakila and describe how you would determine whether it is in 2NF. If it violates 2NF,
-- explain the steps to normalize it
-- ANS 2.
select * from film;
-- FILM table FROM MAVENMOVIES database violates 2nf becouse of the special features column special feature column on the 
-- table violate 1nf and 2nf has a rule that table is in 1nf
-- identify partial dependencies : all the non prime attribute like  title ,discription realase year etc are fully dependent on the primary key 
-- which is film_id 
-- we can create a another table and make them column foreign key and these foreign key make refrence to that film id table 
-- by using these steps we can avoid 2nf.
-- QUE-3 H Identify a table in Sakila that violates 3NF. Describe the transitive dependencies present and outline the
-- steps to normalize the table to 3NF
-- ANS 3. if we saw the customer table inthe mavenmovies database we get to know that the column name adddress_id is linked with store_id
-- and both are non key attribute and 3nf stays that the table is in 2nf from and it ensure that all the non key attribute column on the 
-- table are not related with eah other (one non keys attribute column related to other non key attribute column ) so becouse of that it violate 2 and 3nf
-- steps to prevent 3nf 
 -- 1.analyze the violation 
 -- 2. create new table to store data 
 -- 3. update customer table (make store id as foreign key)
 -- 4. update address info. (so it refrencce to the foreign key) etc 
 -- QUE-5 Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have
-- acted in from the and tables
-- ANS 5. 
WITH actorfilmcount as (
select a.actor_id,concat(a.first_name," ",a.last_name) as actor_name,
count(fa.film_id) as film_count
from actor a join film_actor fa on a.actor_id=fa.actor_id
group by a.actor_id,actor_name)
select actor_name,film_count from actorfilmcount 
order by film_count desc,actor_name;
-- QUE 6 Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category 
-- table in sakila
-- ANS 6 
with recursive categoryhierarchy as ( select
c.category_id, c.name as category_name, null as parent_category_id , 0 as level 
from category c where not exists (select 1 from film_category fc where fc.category_id=c.category_id)
union all 
select c.category_id,c.name as category_name ,fc.category_id as parent_category_id,ch.level+1 as level 
from category c join film_category fc on c.category_id=fc.category_id
join categoryhierarchy ch on fc.film_id=ch.category_id)
select category_id,category_name,parent_category_id,level from categoryhierarchy order by  level ,category_id;
-- QUE 7 Create a CTE that combines information from the and tables to display the film title, language
 -- name, and rental rate
 -- ANS 7
 with filmlanguageinfo as (select f.title as film_title,l.name as language,f.rental_rate
 from film f join language l on f.language_id=l.language_id)
 select film_title,language,rental_rate from filmlanguageinfo;
 -- QUE 8 Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from
-- the and tables
-- ANS 8
with customerrevenue as (
select c.customer_id,c.first_name|| ' ' || c.last_name as customer_name, sum(p.amount) as total_revenue
from customer c left join payment p on c.customer_id=p.customer_id
group by c.customer_id,customer_name)
select customer_id,customer_name,coalesce(total_revenue,0) as total_revenue from customerrevenue 
order by total_revenue desc;
-- QUE 9 Utilize a CTE with a window function to rank films based on their rental duration from the table
-- ANS 9
with rankedfilms as (
select film_id,title ,rental_duration,rank() over (order by rental_duration desc) as rental_duration_rank 
from film)
select film_id, title,rental_duration ,rental_duration_rank
from rankedfilms 
order by rental_duration_rank;
-- QUE 10 Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer
-- table to retrieve additional customer details
-- ANS 10
with customerrentals as (
select customer_id ,count(rental_id) as rental_count 
from rental group by customer_id having count(rental_id)>2)
select c.*, cr.rental_count from customer c join customerrentals cr on c.customer_id=cr.customer_id
order by cr.rental_count desc;
-- QUE 11 Write a query using a CTE to find the total number of rentals made each month, considering the rental_date
-- from the table
-- ANS 11
with monthlyrental as (
select date_format(rental_date,'%y-%m' ) as rental_month,
count(rental_id) as total_rentals
from rental group by rental_month )
select rental_month,total_rentals
from monthlyrental order by rental_month;
-- QUE 12 Use a CTE to pivot the data from the PAYMENT table to display the total payments made by each customer in
-- separate columns for different payment methods
-- ANS 12 since we dont have payment method column or any column that specify payment type we calculate total payment made by each customer
with customerpayments as (
select customer_id,sum(amount) as total_payments from payment group by customer_id)
select c.customer_id,c.first_name,c.last_name,cp.total_payments from customer c 
join customerpayments cp on c.customer_id=cp.customer_id;
-- QUE 13 Create a CTE to generate a report showing pairs of actors who have appeared in the same film together,
-- using the film_actor table
-- ANS 13
with actorparis as (
select fa1.actor_id as actor1_id,fa2.actor_id as actor2_id,
count(*) as films_together
from film_actor fa1
join film_actor fa2 on fa1.film_id=fa2.film_id and fa1.actor_id<fa2.actor_id
group by fa1.actor_id,fa2.actor_id having count(*)>0)
select ap.actor1_id,ap.actor2_id,ap.films_together
from actorparis ap;
-- QUE 14 Implement a recursive CTE to find all employees in the staff table who report to a specific manager,
select * FROM staff;
